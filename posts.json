[{"id":1668920400,"title":"Advices for programmers.\r","author":"Giovani Fouz Jiménez\r","date":"November 20, 2022\r","img":"advices.jpg\r","description":"How to be a better programmer...\r","content":"\r\n# How to be a better programmer.\r\n\r\n![react wallpaper](/images/advices.jpg)\r\n\r\n## Get good at Googling.\r\n\r\nBeing a programmer is all about learning how to search for \r\nthe answers to your questions. By learning to Google things \r\neffectively, you'll save a lot of development time.\r\n\r\n## Write useful comments.\r\n\r\nWrite comments which explain the \"why\" and not the \"what\".\r\n\r\n## Name variables and functions appropriately.\r\n\r\nFunctions and variables should accurately denote \r\ntheir purpose, so myCoolFunction won't fly.\r\n\r\n## Take vacations, invest time on other kind of things.\r\n\r\nWe all need time to de-compress. Take that trip you've been \r\nwanting. Your brain and your co-workers will thank you.\r\n\r\n## Delete unused code\r\nNo reason to accrue more technical debt.\r\n\r\n## Learn to read code\r\nReading code is an undervalued skill, but an invaluable one.\r\n\r\n## Pair program\r\nPair programming allows you to play the role of both teacher and student.\r\n\r\n## Get involved in the community\r\nSurrounding yourself with like-minded people will motivate you to push through the lows.\r\n\r\n## Keep learning\r\nYou've chosen a profession that requires continuous learning. Learn to love it.\r\n\r\n## Don't give up\r\nIt won't always be easy. But we all started at the same place. You can do it.\r\n\r\n## Take tasks that scare you\r\nIf it doesn't scare you, it isn't going to help you grow.\r\n\r\n## Learn to love constructive criticism\r\nAsk trusted colleagues and friends for constructive criticism. It will help you grow as a programmer and as a human.\r\n\r\n## Be open-minded\r\nTechnology changes, and it changes quickly. Don't oppose new technology; learn it and then form an opinion.\r\n\r\n## Stay relevant\r\nStay up-to-date on the latest tech news by following publications, blogs, podcasts, and tech news.\r\n\r\n## Focus on problem solving\r\nStrong problem solving skills can conquer any problem. Hone in on what it takes to solve a problem.\r\n\r\n## Stay humble\r\nNo matter what title you hold or what company you work form, stay humble.\r\n\r\n## Learn to debug\r\nExplore the browser debugger tools. Learn the ins-and-outs of debugging with your IDE. By learning the most effective methods for debugging a problem and tracing errors, you'll be able to solve even the most difficult bugs.\r\n\r\n## Exercise your current skills\r\nJust because you currently know a skill doesn't mean you shouldn't exercise it. Skills fade with time unless consciously improved upon, and this industry evolves so rapidly it's important to keep practicing. Get out of the mindset that \"I've always done it this way\" and into the mindset of \"Is there a better way to do this?\"\r\n\r\n## Understand the why\r\nThere will be times when you have to voice your opinion, so it's important to understand the why behind it. Why is solution A better than solution B? Provide a valid argument and your opinions will be much more sound.\r\n\r\n## Know your worth\r\nYou are a commodity, and should be paid appropriately. Be aware of the industry averages in your geographic location. If you're making less money, it's time to have a chat with your manager. Go after what you deserve.\r\n\r\n## Don't be afraid to ask for help\r\nIf you're stuck on a problem and spending too much time searching for a solution, it's time to ask for help. We're all human. We all need help. There is no shame in reaching out to a colleague for support.\r\n\r\n## Learn to learn\r\nPeople learn in different ways. Some learn best through video tutorials, others through reading a book. Figure out your learning style and practice it diligently.\r\n\r\n## Take breaks\r\nIt's nearly impossible to spend 8 consecutive hours coding. You'll burn out quickly and make a lot of mistakes. So set a timer to remind yourself to stop and take a break. Go for a walk. Get a coffee with a colleague. Stepping away from the screen will positively impact your productivity and the quality of your work.\r\n\r\n## Track your progress\r\nLearning to code takes time and can be extremely disheartening when you don't see progress. So it's important to track your achievements and progress towards your goals. Keep a small list next to your computer and each time you achieve something, write it down, no matter how small. Atomic achievements compound to much larger rewards.\r\n\r\n## Don't choose the comfortable technology; choose the right one\r\nEach project will have different needs, and as such we must choose the right tools for the job. Although it's comfortable to choose technologies you've worked with previously, if they don't suit the needs of the project, alternatives should be explored.\r\n\r\n## Take responsibility for your mistakes\r\nAll humans make mistakes and you will many many throughout your career. Thus it's important to own up and take responsibility when you've made a mistake. It will build trust with your team members and management.\r\n\r\n## Learn from your failures\r\nFailure is simply not achieving the expected outcome, and is not necessarily a bad thing. We all have many failures during the course of our careers. Learn from your downfalls. What can you do differently next time?\r\n\r\n## Test your code\r\nTests are important. Unit tests, regression tests, integration tests, end-to-end tests. Test your code and your product will be much more stable.\r\n\r\n## Reduce ambiguity\r\nInstead of writing convoluted code which shows off your snazzy programming skills, aim for readability and simplicity. This will make it easier for your team members to contribute.\r\n\r\n## Read documentation\r\nDocumentation is the purest source of truth about a technology, so learning to read it can quickly help you to become an expert.\r\n\r\n## Don't compare yourself to others\r\nThe only thing you should compare yourself to is who you were yesterday.\r\n\r\n## Apply for jobs you aren't qualified for\r\nYou will never meet every requirement for a job. So take a chance and apply! What do you have to lose?\r\n\r\n## Learn how to work from home\r\nIf you have the ability to work from home, learn to do so effectively. Find a separate office space, devoid of distractions. Boneskull wrote a great article on working from home you should check out.\r\n\r\n## Remember why you love programming\r\nYou got into this profession because it sparked an interest. If you're getting frustrated and resentful, take a break. Give yourself space to reignite your passion for programming.\r\n\r\n## Share your knowledge\r\nIf you learn something cool, share it! Present at a local meetup or conference. Teach your coworker or mentee during lunch. Sharing your knowledge reinforces your knowledge while spreading\r\nthe wealth.\r\n"},{"id":1669093200,"title":"An awesome framework for Node.\r","author":"Giovani Fouz Jiménez\r","date":"November 22, 2022\r","img":"node.jpg\r","description":"Introduction to express...\r","content":"\r\n# Wonderful ExpressJs!\r\n\r\n![node wallpaper](/images/node.jpg)\r\n\r\n## What is Node.Js ?\r\n\r\nNode.js is a JavaScript run time environment which is used to create server-side applications and tools. Node.js is fast, portable, and written in JavaScript but it does not directly support common tasks such as handling requests, serving files, and handling HTTP methods such as GET and POST. This is where Node.js’s rich ecosystem comes to our aid.\r\n\r\n## What is Express.Js ?\r\n\r\nExpress.js (Express) is a light web framework which sits on top of Node.js and it adds functionality like (middleware, routing, etc.) and simplicity to Node.js.\r\n\r\n## A brief explanation!\r\n\r\nWhen creating a Node.js web application, we write a single JavaScript application which listens to requests from the browser, based on the request, the function will send back some data or an HTML web page.\r\n\r\n## Request and Response objects.\r\n\r\nA request handler is a JavaScript function which takes a request and sends an appropriate response.\r\nNode.js APIs can get complex and writing how to handle a single request can end up being over many lines of code. Express makes it easier to write Node.js web applications.\r\n\r\n\r\n## Advantages of using Express with Node.js\r\n\r\nExpress lets you take away a lot of the complexities of Node.js while adding helpful functions to a Node.js HTTP server.\r\nInstead of a large request handler function, Express allows us to handle requests by writing many small modular and maintainable functions.\r\nExpress is not opinionated, meaning Express does not enforce any “right way” of doing things. You can use any compatible middleware, and you can structure the app as you wish, making it flexible.\r\nWe can integrate with a template rendering engine (also called a view rendering engine in some articles) of our choice like Jade, Pug, EJS, etc.\r\nA template engine enables you to use static template files and at runtime change the values of variables in those files.\r\nYou can set up “middleware” for request processing.\r\n\r\n## What is a Middleware? \r\n\r\nMiddleware is a set of functions that sit between a raw request and the final intended route. Middleware functions have access to all the HTTP requests coming to the server. Middleware can handle tasks such as logging, sending static files, authorization, and session management, etc.\r\n\r\nIn Node.js, the request and response objects are passed to one function (request handler) that we write, in Express these objects are passed through a set of functions, called the middleware stack.\r\n\r\nExpress will start at the first function in the stack and execute in order down the stack.\r\n\r\nEvery function in the stack takes three arguments request, response and next. next is a function, that when called Express executes the next function in the stack. This is a subtle difference between middleware and a route handler which we saw above.\r\n\r\nLet’s look at a basic static file server to understand middleware. Initialize a new npm project. Then create a directory named static and copy-paste any available static files into the folder (text, images, etc.).\r\n\r\n"},{"id":1645419600,"title":"Inmutabilidad\r","author":"Giovani Fouz Jiménez\r","date":"febraury 21, 2022\r","img":"black.jpg\r","description":"Que significa inmutabilidad y porque es tan importante...\r","content":"\r\n![react wallpaper](/images/black.jpg)\r\n\r\n## Mutable o Inmutable.\r\n\r\nEl desarrollo con datos inmutables es un principio fundamental de la\r\nprogramación funcional que se está extendiendo también en la\r\nprogramación orientada a objeto. Su planteamiento básico es muy\r\nsencillo: un dato u objeto, una vez creado, no puede ser cambiado,\r\nmanteniendo su estado original en todo momento. Si por algún motivo se\r\ntuviera que cambiar el dato, entonces se obtendría una copia con los\r\ndatos modificados, pero nunca se cambian los valores originales. Lo\r\ncontrario a la inmutabilidad es la mutabilidad, es decir, la capacidad\r\npara cambiar el valor o el estado de los elementos de un lenguaje de\r\nprogramación. Cuando cambiamos el valor de una propiedad, o la\r\nreferencia de una variable, estamos haciendo uso de mutabilidad, es\r\ndecir, de la capacidad de cambiar.\r\n\r\n## Utilidad de 'const' en JavaScript.\r\n\r\n'const' nos va ayudar a declarar variables inmutables, esto es, a\r\ndeclarar variables cuyo valor no pueda ser cambiado a lo largo del\r\nciclo de vida de una variable. si intentamos asignar un nuevo valor a\r\nla constante, se nos lanzará una excepción con el error provocado.\r\nTenemos que tener cuidado cuando deseemos almacenar un objeto JSON en\r\nuna constante de JavaScript. cuando asignamos un objeto a una\r\nvariable, no estamos almacenando el objeto en si en esa variable, si\r\nno que se está almacenando una referencia al objeto. Se almacena el\r\npuntero con la posición donde se encuentra el objeto real. Por tanto,\r\nsi seguimos esta lógica, lo que ‘const’ está convirtiendo en inmutable\r\nno es el objeto en si, si no la referencia a ese objeto.\r\n\r\n```js\r\n(() => {\r\n  const url = 'https://gist.github.com/';\r\n  url = 'http://www.as.com'; // Lanza un error!\r\n})();\r\n```\r\n\r\n#### Sin embargo, no se produce error al asignar nuevos valores a la propiedades de un objeto:\r\n\r\n```js\r\n(() => {\r\n  const objeto = {\r\n    nombre: 'Giovani',\r\n  };\r\n  objeto.apellidos = 'creo nueva propiedad, cuyo valor es mutable';\r\n  objeto.nombre = 'cambio el valor, no se lanza ninguna excepción';\r\n\r\n  console.log(any);\r\n})();\r\n```\r\n\r\nReitero lo anterior respecto a JavaScript, cuando asignamos un objeto a una variable, no estamos almacenando el objeto en si en esa variable, si no que se está almacenando una referencia del objeto. Se almacena el puntero con la posición en memoria donde se encuentra el objeto real.\r\n"},{"id":1642222800,"title":"composición funcional\r","author":"Giovani Fouz Jiménez\r","date":"january 15, 2022\r","img":"book.jpg\r","description":"El paradigma de la programación funcional es...\r","content":"\r\n![react wallpaper](/images/wallpaper.webp)\r\n\r\n## Composición funcional\r\n\r\nLa composición es la piedra angular que nos permitirá a partir de\r\nfunciones puras genéricas crear funciones más específicas para al\r\nfinal construir nuestros programas.Similar a como en la música las notas\r\n(funciones puras) conforman acordes (funciones de dominio compuestas)\r\ny los acordes conforman obras (pieza de software), la composición será\r\nel pegamento que nos permitirá desarrollar nuestros programas.\r\n"},{"id":1669179600,"title":"React is leading web innovation.\r","author":"Giovani Fouz Jiménez\r","date":"November 23, 2022\r","img":"react.jpg\r","description":"Introduction to ReactJs...\r","content":"\r\n# The front-end king upto now!\r\n\r\n![react wallpaper](/images/react.jpg)\r\n\r\n## What is React ?\r\n\r\nReact is a JavaScript library developed by Facebook which, among other things, was used to build Instagram.com. Its aim is to allow developers to easily create fast user interfaces for websites and applications alike. The main concept of React.js is virtual DOM. It is a tree based on JavaScript components created with React that mimics a DOM tree. It does the least amount of DOM manipulation possible in order to keep your React components up to date.\r\n\r\n## A little of history\r\n\r\nFirstly, React was deployed by Facebook in 2011 and 2012. Instagram was written entirely in React. According to JavaScript analytics service Libscore, React is currently being used on the homepages and other web pages of Netflix, Imgur, Bleacher Report, Feedly, Airbnb, SeatGeek, HelloSign, and others.\r\n\r\n## Why Use React.js for Web Development?\r\n\r\nBeing a part of the JavaScript language, using React spawns lots of advantages. Products built with React are simple to scale, a single language used on the server/client/mobile side of things grants outstanding productivity, there are workflow patterns for convenient teamwork, UI code is readable and maintainable, and more. World-leading companies have used React and other JS technologies in some of the top market-defining products out there (Instagram, Reddit, and Facebook being the most vivid examples).\r\n\r\nBut let’s take a closer, more informed look at some particular reasons why use React and, more importantly, when to use React.js to tackle the most fitting goals and achieve outstanding results.\r\n\r\n## Mature, simple-to-grasp dev workflow\r\nOne of the major reasons to use React.js for web development is the library’s ultimately optimized development interface and coding language. Thus, lightweight React’s API is reinforced with fast performance capacities to achieve a hassle-free, rapid development workflow. React components and concepts are really simple to figure out so there is not much learning curve here.\r\n\r\nAs opposed to other popular frameworks, like Vue and Angular, there is no barrage of extra HTML attributes (created when JavaScript is “crammed” into HTML - a standard practice for traditional frameworks and JS library solutions). In the long run, by putting JSX into JavaScript (literally going the other way round), React grants a much cleaner, better readable, more comprehensive code.\r\n\r\n## Ultimate flexibility and compatibility\r\n\r\nUsing React.js for web development may come in extremely convenient because React is one of those cases where you get the hang of a single technology to easily reuse it across a range of platforms. And all due to being a library by nature, with the primary purpose of creating separate web design elements and components (anything from buttons and labels to grids and interactive features).\r\n\r\nOn top of that, there is a significant contribution by the extensive, long-established community. React’s current ecosystem is so vast that it enables developers to create desktop solutions and mobile applications, generate static websites, handle server rendering, and integrate advanced tech concepts (like VR and 360 views) with web solutions - all by similar, simple react web development guidelines and philosophies.\r\n\r\n## Hassle-free reusability of components\r\n\r\nWe answer the ultimate question above - what is React.js used for in web development most particularly? For creating separate components. And this is exactly why created components can be easily reused. Once you’ve created a React.js web application element, you get a unique object that can be added to any other project compatible with the React-based code.\r\n\r\nWhile a bigger general hierarchy is built out of those components (which are wrapped into higher-level components), each has a separate dedicated internal logic and rendering principle. This grants outstanding scaling opportunities helps to achieve much better React web app consistency and makes further support and optimization a piece of cake.\r\n"},{"id":1644037200,"title":"Reactivity\r","author":"Giovani Fouz Jiménez\r","date":"febraury 5, 2022\r","img":"me.jpg\r","description":"Que es la reactividad y porque es tan importante...\r","content":"\r\n## we’re going to look at reactivity in Vue.\r\n\r\n![react wallpaper](/images/coffee.jpg)\r\n\r\n## The non-reactive nature of JavaScript.\r\n\r\nthis article, we’re going to look at reactivity in Vue, how it works,\r\nand how we can create reactive variables using newly created methods\r\nand functions. This article is targeted at developers who have a good\r\nunderstanding of how Vue 2.x works and are looking to get familiar\r\nwith the new Vue 3. We’re going to build a simple application to\r\nbetter understand this topic. The code for this app can be found on\r\nGitHub. By default, JavaScript isn’t reactive. This means that if we\r\ncreate the variable boy and reference it in part A of our application,\r\nthen proceed to modify boy in part B, part A will not update with the\r\nnew value of boy.\r\n\r\n```js\r\nlet framework = 'Vue';\r\nlet words = `${framework} is cool`;\r\nconsole.log(words);\r\n// logs \"Vue is awesome\"\r\nframework = 'React';\r\nconsole.log(words);\r\n//should log \"React is awesome\"\r\n// if 'words' were reactive.\r\n```\r\n\r\n## Reactive properties.\r\n\r\nThe snippet above is a perfect example of the non-reactive nature of\r\nJavaScript — hence, why the change isn’t reflected in the sentence\r\nvariable. In Vue 2.x, props, computed, and data() were all reactive by\r\ndefault, with the exception of properties that are not present in data\r\nwhen such components are created. This means that when a component is\r\ninjected into the DOM, only the existing properties in the component’s\r\ndata object would cause the component to update if and when such\r\nproperties change. Internally, Vue 3 uses the Proxy object (an\r\nECMAScript 6 feature) to ensure that these properties are reactive,\r\nbut it still provides the option to use Object.defineProperty from Vue\r\n2 for Internet Explorer support (ECMAScript 5). This method defines a\r\nnew property directly on an object, or modifies an existing property\r\non an object, and returns the object.\r\n\r\n## Composition Api.\r\n\r\nAt first glance and since most of us already know that reactivity is\r\nnot new in Vue, it might seem unnecessary to make use of these\r\nproperties, but the Options API has its limitations when you’re\r\ndealing with a large application with reusable functions in several\r\nparts of the application. To this end, the new Composition API was\r\nintroduced to help with abstracting logic in order to make a code base\r\neasier to read and maintain. Also, we can now easily make any variable\r\nreactive regardless of its data type using any of the new properties\r\nand methods. When we use the setup option, which serves as the entry\r\npoint for the Composition API, the data object, computed properties,\r\nand methods are inaccessible because the component instance has not\r\nyet been created when setup is executed. This makes it impossible to\r\ntake advantage of the built-in reactivity in any of these features in\r\nsetup.\r\n"}]